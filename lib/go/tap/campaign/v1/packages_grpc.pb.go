// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tap/campaign/v1/packages.proto

package campaignv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PackagesService_ListPackages_FullMethodName  = "/tap.campaign.v1.PackagesService/ListPackages"
	PackagesService_GetPackage_FullMethodName    = "/tap.campaign.v1.PackagesService/GetPackage"
	PackagesService_CreatePackage_FullMethodName = "/tap.campaign.v1.PackagesService/CreatePackage"
)

// PackagesServiceClient is the client API for PackagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackagesServiceClient interface {
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error)
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error)
	CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error)
}

type packagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackagesServiceClient(cc grpc.ClientConnInterface) PackagesServiceClient {
	return &packagesServiceClient{cc}
}

func (c *packagesServiceClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error) {
	out := new(ListPackagesResponse)
	err := c.cc.Invoke(ctx, PackagesService_ListPackages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesServiceClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error) {
	out := new(GetPackageResponse)
	err := c.cc.Invoke(ctx, PackagesService_GetPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesServiceClient) CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error) {
	out := new(CreatePackageResponse)
	err := c.cc.Invoke(ctx, PackagesService_CreatePackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackagesServiceServer is the server API for PackagesService service.
// All implementations must embed UnimplementedPackagesServiceServer
// for forward compatibility
type PackagesServiceServer interface {
	ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error)
	mustEmbedUnimplementedPackagesServiceServer()
}

// UnimplementedPackagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackagesServiceServer struct {
}

func (UnimplementedPackagesServiceServer) ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedPackagesServiceServer) GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedPackagesServiceServer) CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedPackagesServiceServer) mustEmbedUnimplementedPackagesServiceServer() {}

// UnsafePackagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackagesServiceServer will
// result in compilation errors.
type UnsafePackagesServiceServer interface {
	mustEmbedUnimplementedPackagesServiceServer()
}

func RegisterPackagesServiceServer(s grpc.ServiceRegistrar, srv PackagesServiceServer) {
	s.RegisterService(&PackagesService_ServiceDesc, srv)
}

func _PackagesService_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServiceServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackagesService_ListPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServiceServer).ListPackages(ctx, req.(*ListPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackagesService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackagesService_GetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServiceServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackagesService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackagesService_CreatePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServiceServer).CreatePackage(ctx, req.(*CreatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackagesService_ServiceDesc is the grpc.ServiceDesc for PackagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tap.campaign.v1.PackagesService",
	HandlerType: (*PackagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPackages",
			Handler:    _PackagesService_ListPackages_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _PackagesService_GetPackage_Handler,
		},
		{
			MethodName: "CreatePackage",
			Handler:    _PackagesService_CreatePackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tap/campaign/v1/packages.proto",
}
