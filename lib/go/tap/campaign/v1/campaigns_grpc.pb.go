// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tap/campaign/v1/campaigns.proto

package campaignv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CampaignsService_ListCampaigns_FullMethodName = "/tap.campaign.v1.CampaignsService/ListCampaigns"
	CampaignsService_GetCampaign_FullMethodName   = "/tap.campaign.v1.CampaignsService/GetCampaign"
)

// CampaignsServiceClient is the client API for CampaignsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignsServiceClient interface {
	ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*ListCampaignsResponse, error)
	GetCampaign(ctx context.Context, in *GetCampaignRequest, opts ...grpc.CallOption) (*GetCampaignResponse, error)
}

type campaignsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignsServiceClient(cc grpc.ClientConnInterface) CampaignsServiceClient {
	return &campaignsServiceClient{cc}
}

func (c *campaignsServiceClient) ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*ListCampaignsResponse, error) {
	out := new(ListCampaignsResponse)
	err := c.cc.Invoke(ctx, CampaignsService_ListCampaigns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignsServiceClient) GetCampaign(ctx context.Context, in *GetCampaignRequest, opts ...grpc.CallOption) (*GetCampaignResponse, error) {
	out := new(GetCampaignResponse)
	err := c.cc.Invoke(ctx, CampaignsService_GetCampaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignsServiceServer is the server API for CampaignsService service.
// All implementations must embed UnimplementedCampaignsServiceServer
// for forward compatibility
type CampaignsServiceServer interface {
	ListCampaigns(context.Context, *ListCampaignsRequest) (*ListCampaignsResponse, error)
	GetCampaign(context.Context, *GetCampaignRequest) (*GetCampaignResponse, error)
	mustEmbedUnimplementedCampaignsServiceServer()
}

// UnimplementedCampaignsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCampaignsServiceServer struct {
}

func (UnimplementedCampaignsServiceServer) ListCampaigns(context.Context, *ListCampaignsRequest) (*ListCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (UnimplementedCampaignsServiceServer) GetCampaign(context.Context, *GetCampaignRequest) (*GetCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaign not implemented")
}
func (UnimplementedCampaignsServiceServer) mustEmbedUnimplementedCampaignsServiceServer() {}

// UnsafeCampaignsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignsServiceServer will
// result in compilation errors.
type UnsafeCampaignsServiceServer interface {
	mustEmbedUnimplementedCampaignsServiceServer()
}

func RegisterCampaignsServiceServer(s grpc.ServiceRegistrar, srv CampaignsServiceServer) {
	s.RegisterService(&CampaignsService_ServiceDesc, srv)
}

func _CampaignsService_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsServiceServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsService_ListCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsServiceServer).ListCampaigns(ctx, req.(*ListCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignsService_GetCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignsServiceServer).GetCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignsService_GetCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignsServiceServer).GetCampaign(ctx, req.(*GetCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignsService_ServiceDesc is the grpc.ServiceDesc for CampaignsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tap.campaign.v1.CampaignsService",
	HandlerType: (*CampaignsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCampaigns",
			Handler:    _CampaignsService_ListCampaigns_Handler,
		},
		{
			MethodName: "GetCampaign",
			Handler:    _CampaignsService_GetCampaign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tap/campaign/v1/campaigns.proto",
}
