// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: tap/sub/v1/sites.proto

package subv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SitesService_ListSites_FullMethodName  = "/tap.sub.v1.SitesService/ListSites"
	SitesService_GetSite_FullMethodName    = "/tap.sub.v1.SitesService/GetSite"
	SitesService_CreateSite_FullMethodName = "/tap.sub.v1.SitesService/CreateSite"
	SitesService_UpdateSite_FullMethodName = "/tap.sub.v1.SitesService/UpdateSite"
	SitesService_DeleteSite_FullMethodName = "/tap.sub.v1.SitesService/DeleteSite"
)

// SitesServiceClient is the client API for SitesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provider sites management service definition.
type SitesServiceClient interface {
	// Lists provider sites.
	ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error)
	// Gets provider site.
	GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*GetSiteResponse, error)
	// Creates provider site.
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error)
	// Updates provider site.
	UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateSiteResponse, error)
	// Deletes provider site.
	DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteResponse, error)
}

type sitesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSitesServiceClient(cc grpc.ClientConnInterface) SitesServiceClient {
	return &sitesServiceClient{cc}
}

func (c *sitesServiceClient) ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSitesResponse)
	err := c.cc.Invoke(ctx, SitesService_ListSites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*GetSiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSiteResponse)
	err := c.cc.Invoke(ctx, SitesService_GetSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSiteResponse)
	err := c.cc.Invoke(ctx, SitesService_CreateSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateSiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSiteResponse)
	err := c.cc.Invoke(ctx, SitesService_UpdateSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSiteResponse)
	err := c.cc.Invoke(ctx, SitesService_DeleteSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SitesServiceServer is the server API for SitesService service.
// All implementations must embed UnimplementedSitesServiceServer
// for forward compatibility
//
// Provider sites management service definition.
type SitesServiceServer interface {
	// Lists provider sites.
	ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error)
	// Gets provider site.
	GetSite(context.Context, *GetSiteRequest) (*GetSiteResponse, error)
	// Creates provider site.
	CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error)
	// Updates provider site.
	UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateSiteResponse, error)
	// Deletes provider site.
	DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteResponse, error)
	mustEmbedUnimplementedSitesServiceServer()
}

// UnimplementedSitesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSitesServiceServer struct {
}

func (UnimplementedSitesServiceServer) ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSites not implemented")
}
func (UnimplementedSitesServiceServer) GetSite(context.Context, *GetSiteRequest) (*GetSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (UnimplementedSitesServiceServer) CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSite not implemented")
}
func (UnimplementedSitesServiceServer) UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSite not implemented")
}
func (UnimplementedSitesServiceServer) DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSite not implemented")
}
func (UnimplementedSitesServiceServer) mustEmbedUnimplementedSitesServiceServer() {}

// UnsafeSitesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SitesServiceServer will
// result in compilation errors.
type UnsafeSitesServiceServer interface {
	mustEmbedUnimplementedSitesServiceServer()
}

func RegisterSitesServiceServer(s grpc.ServiceRegistrar, srv SitesServiceServer) {
	s.RegisterService(&SitesService_ServiceDesc, srv)
}

func _SitesService_ListSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).ListSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SitesService_ListSites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).ListSites(ctx, req.(*ListSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SitesService_GetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).GetSite(ctx, req.(*GetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SitesService_CreateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).CreateSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_UpdateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).UpdateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SitesService_UpdateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).UpdateSite(ctx, req.(*UpdateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SitesService_DeleteSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).DeleteSite(ctx, req.(*DeleteSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SitesService_ServiceDesc is the grpc.ServiceDesc for SitesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SitesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tap.sub.v1.SitesService",
	HandlerType: (*SitesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSites",
			Handler:    _SitesService_ListSites_Handler,
		},
		{
			MethodName: "GetSite",
			Handler:    _SitesService_GetSite_Handler,
		},
		{
			MethodName: "CreateSite",
			Handler:    _SitesService_CreateSite_Handler,
		},
		{
			MethodName: "UpdateSite",
			Handler:    _SitesService_UpdateSite_Handler,
		},
		{
			MethodName: "DeleteSite",
			Handler:    _SitesService_DeleteSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tap/sub/v1/sites.proto",
}
