// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: tap/verify/v1/tickets.proto

package verifyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TicketsService_ListTickets_FullMethodName             = "/tap.verify.v1.TicketsService/ListTickets"
	TicketsService_GetTicket_FullMethodName               = "/tap.verify.v1.TicketsService/GetTicket"
	TicketsService_CreateTicket_FullMethodName            = "/tap.verify.v1.TicketsService/CreateTicket"
	TicketsService_UpdateTicket_FullMethodName            = "/tap.verify.v1.TicketsService/UpdateTicket"
	TicketsService_DeleteTicket_FullMethodName            = "/tap.verify.v1.TicketsService/DeleteTicket"
	TicketsService_AddTicketTags_FullMethodName           = "/tap.verify.v1.TicketsService/AddTicketTags"
	TicketsService_ListTicketTags_FullMethodName          = "/tap.verify.v1.TicketsService/ListTicketTags"
	TicketsService_DeleteTicketTags_FullMethodName        = "/tap.verify.v1.TicketsService/DeleteTicketTags"
	TicketsService_Verify_FullMethodName                  = "/tap.verify.v1.TicketsService/Verify"
	TicketsService_ListTicketVerifications_FullMethodName = "/tap.verify.v1.TicketsService/ListTicketVerifications"
	TicketsService_IsApproved_FullMethodName              = "/tap.verify.v1.TicketsService/IsApproved"
)

// TicketsServiceClient is the client API for TicketsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ticket's management service
type TicketsServiceClient interface {
	// Lists tickets
	ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	// Gets a ticket
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error)
	// Create a ticket
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	// Updates a ticket
	UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*UpdateTicketResponse, error)
	// Deletes a ticket
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error)
	// Add tags
	AddTicketTags(ctx context.Context, in *AddTicketTagsRequest, opts ...grpc.CallOption) (*AddTicketTagsResponse, error)
	// List tags
	ListTicketTags(ctx context.Context, in *ListTicketTagsRequest, opts ...grpc.CallOption) (*ListTicketTagsResponse, error)
	// Remove tags
	DeleteTicketTags(ctx context.Context, in *DeleteTicketTagsRequest, opts ...grpc.CallOption) (*DeleteTicketTagsResponse, error)
	// Verify a ticket
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	// List ticket verifications
	ListTicketVerifications(ctx context.Context, in *ListTicketVerificationsRequest, opts ...grpc.CallOption) (*ListTicketVerificationsResponse, error)
	// check whether a ticket is approved
	IsApproved(ctx context.Context, in *IsApprovedRequest, opts ...grpc.CallOption) (*IsApprovedResponse, error)
}

type ticketsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketsServiceClient(cc grpc.ClientConnInterface) TicketsServiceClient {
	return &ticketsServiceClient{cc}
}

func (c *ticketsServiceClient) ListTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, TicketsService_ListTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicketResponse)
	err := c.cc.Invoke(ctx, TicketsService_GetTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, TicketsService_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*UpdateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTicketResponse)
	err := c.cc.Invoke(ctx, TicketsService_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTicketResponse)
	err := c.cc.Invoke(ctx, TicketsService_DeleteTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) AddTicketTags(ctx context.Context, in *AddTicketTagsRequest, opts ...grpc.CallOption) (*AddTicketTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTicketTagsResponse)
	err := c.cc.Invoke(ctx, TicketsService_AddTicketTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) ListTicketTags(ctx context.Context, in *ListTicketTagsRequest, opts ...grpc.CallOption) (*ListTicketTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketTagsResponse)
	err := c.cc.Invoke(ctx, TicketsService_ListTicketTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) DeleteTicketTags(ctx context.Context, in *DeleteTicketTagsRequest, opts ...grpc.CallOption) (*DeleteTicketTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTicketTagsResponse)
	err := c.cc.Invoke(ctx, TicketsService_DeleteTicketTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, TicketsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) ListTicketVerifications(ctx context.Context, in *ListTicketVerificationsRequest, opts ...grpc.CallOption) (*ListTicketVerificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTicketVerificationsResponse)
	err := c.cc.Invoke(ctx, TicketsService_ListTicketVerifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) IsApproved(ctx context.Context, in *IsApprovedRequest, opts ...grpc.CallOption) (*IsApprovedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsApprovedResponse)
	err := c.cc.Invoke(ctx, TicketsService_IsApproved_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketsServiceServer is the server API for TicketsService service.
// All implementations must embed UnimplementedTicketsServiceServer
// for forward compatibility
//
// Ticket's management service
type TicketsServiceServer interface {
	// Lists tickets
	ListTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	// Gets a ticket
	GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error)
	// Create a ticket
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	// Updates a ticket
	UpdateTicket(context.Context, *UpdateTicketRequest) (*UpdateTicketResponse, error)
	// Deletes a ticket
	DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error)
	// Add tags
	AddTicketTags(context.Context, *AddTicketTagsRequest) (*AddTicketTagsResponse, error)
	// List tags
	ListTicketTags(context.Context, *ListTicketTagsRequest) (*ListTicketTagsResponse, error)
	// Remove tags
	DeleteTicketTags(context.Context, *DeleteTicketTagsRequest) (*DeleteTicketTagsResponse, error)
	// Verify a ticket
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	// List ticket verifications
	ListTicketVerifications(context.Context, *ListTicketVerificationsRequest) (*ListTicketVerificationsResponse, error)
	// check whether a ticket is approved
	IsApproved(context.Context, *IsApprovedRequest) (*IsApprovedResponse, error)
	mustEmbedUnimplementedTicketsServiceServer()
}

// UnimplementedTicketsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketsServiceServer struct {
}

func (UnimplementedTicketsServiceServer) ListTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTickets not implemented")
}
func (UnimplementedTicketsServiceServer) GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedTicketsServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedTicketsServiceServer) UpdateTicket(context.Context, *UpdateTicketRequest) (*UpdateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedTicketsServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedTicketsServiceServer) AddTicketTags(context.Context, *AddTicketTagsRequest) (*AddTicketTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTicketTags not implemented")
}
func (UnimplementedTicketsServiceServer) ListTicketTags(context.Context, *ListTicketTagsRequest) (*ListTicketTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketTags not implemented")
}
func (UnimplementedTicketsServiceServer) DeleteTicketTags(context.Context, *DeleteTicketTagsRequest) (*DeleteTicketTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketTags not implemented")
}
func (UnimplementedTicketsServiceServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedTicketsServiceServer) ListTicketVerifications(context.Context, *ListTicketVerificationsRequest) (*ListTicketVerificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketVerifications not implemented")
}
func (UnimplementedTicketsServiceServer) IsApproved(context.Context, *IsApprovedRequest) (*IsApprovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsApproved not implemented")
}
func (UnimplementedTicketsServiceServer) mustEmbedUnimplementedTicketsServiceServer() {}

// UnsafeTicketsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketsServiceServer will
// result in compilation errors.
type UnsafeTicketsServiceServer interface {
	mustEmbedUnimplementedTicketsServiceServer()
}

func RegisterTicketsServiceServer(s grpc.ServiceRegistrar, srv TicketsServiceServer) {
	s.RegisterService(&TicketsService_ServiceDesc, srv)
}

func _TicketsService_ListTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).ListTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_ListTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).ListTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_GetTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).UpdateTicket(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_AddTicketTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTicketTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).AddTicketTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_AddTicketTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).AddTicketTags(ctx, req.(*AddTicketTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_ListTicketTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).ListTicketTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_ListTicketTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).ListTicketTags(ctx, req.(*ListTicketTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_DeleteTicketTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).DeleteTicketTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_DeleteTicketTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).DeleteTicketTags(ctx, req.(*DeleteTicketTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_ListTicketVerifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketVerificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).ListTicketVerifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_ListTicketVerifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).ListTicketVerifications(ctx, req.(*ListTicketVerificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_IsApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).IsApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_IsApproved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).IsApproved(ctx, req.(*IsApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketsService_ServiceDesc is the grpc.ServiceDesc for TicketsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tap.verify.v1.TicketsService",
	HandlerType: (*TicketsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTickets",
			Handler:    _TicketsService_ListTickets_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _TicketsService_GetTicket_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _TicketsService_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _TicketsService_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _TicketsService_DeleteTicket_Handler,
		},
		{
			MethodName: "AddTicketTags",
			Handler:    _TicketsService_AddTicketTags_Handler,
		},
		{
			MethodName: "ListTicketTags",
			Handler:    _TicketsService_ListTicketTags_Handler,
		},
		{
			MethodName: "DeleteTicketTags",
			Handler:    _TicketsService_DeleteTicketTags_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _TicketsService_Verify_Handler,
		},
		{
			MethodName: "ListTicketVerifications",
			Handler:    _TicketsService_ListTicketVerifications_Handler,
		},
		{
			MethodName: "IsApproved",
			Handler:    _TicketsService_IsApproved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tap/verify/v1/tickets.proto",
}
