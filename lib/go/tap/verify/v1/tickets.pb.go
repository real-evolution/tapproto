// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: tap/verify/v1/tickets.proto

package verifyv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for `ListTickets`
type ListTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by title
	Title *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Creation timestamp after which to query.
	BeforeTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=before_timestamp,json=beforeTimestamp,proto3,oneof" json:"before_timestamp,omitempty"`
	// The maximum number of products to return
	PageSize *int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *ListTicketsRequest) Reset() {
	*x = ListTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketsRequest) ProtoMessage() {}

func (x *ListTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketsRequest.ProtoReflect.Descriptor instead.
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{0}
}

func (x *ListTicketsRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ListTicketsRequest) GetBeforeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BeforeTimestamp
	}
	return nil
}

func (x *ListTicketsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

// Response message for `ListTickets`
type ListTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tickets
	Tickets []*Ticket `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
}

func (x *ListTicketsResponse) Reset() {
	*x = ListTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketsResponse) ProtoMessage() {}

func (x *ListTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketsResponse.ProtoReflect.Descriptor instead.
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{1}
}

func (x *ListTicketsResponse) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

// Request message for `GetTicket`
type GetTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket
	Id *TicketID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTicketRequest) Reset() {
	*x = GetTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketRequest) ProtoMessage() {}

func (x *GetTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketRequest.ProtoReflect.Descriptor instead.
func (*GetTicketRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{2}
}

func (x *GetTicketRequest) GetId() *TicketID {
	if x != nil {
		return x.Id
	}
	return nil
}

// Response message for `GetTicket`
type GetTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ticket
	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *GetTicketResponse) Reset() {
	*x = GetTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketResponse) ProtoMessage() {}

func (x *GetTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketResponse.ProtoReflect.Descriptor instead.
func (*GetTicketResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{3}
}

func (x *GetTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

// Request message for `CreateTicket`
type CreateTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The title of the ticket
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Ticket initial tags.
	Tags []*TicketTag `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CreateTicketRequest) Reset() {
	*x = CreateTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketRequest) ProtoMessage() {}

func (x *CreateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketRequest.ProtoReflect.Descriptor instead.
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTicketRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTicketRequest) GetTags() []*TicketTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Response message for `CreateTicket`
type CreateTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created ticket
	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *CreateTicketResponse) Reset() {
	*x = CreateTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketResponse) ProtoMessage() {}

func (x *CreateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketResponse.ProtoReflect.Descriptor instead.
func (*CreateTicketResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

// Request message for `UpdateTicket`
type UpdateTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket
	Id *TicketID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of the ticket
	Title *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *UpdateTicketRequest) Reset() {
	*x = UpdateTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTicketRequest) ProtoMessage() {}

func (x *UpdateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTicketRequest.ProtoReflect.Descriptor instead.
func (*UpdateTicketRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTicketRequest) GetId() *TicketID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateTicketRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

// Response message for `UpdateTicket`
type UpdateTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated ticket
	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *UpdateTicketResponse) Reset() {
	*x = UpdateTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTicketResponse) ProtoMessage() {}

func (x *UpdateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTicketResponse.ProtoReflect.Descriptor instead.
func (*UpdateTicketResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

// Request message for `DeleteTicket`
type DeleteTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket
	Id *TicketID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTicketRequest) Reset() {
	*x = DeleteTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketRequest) ProtoMessage() {}

func (x *DeleteTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketRequest.ProtoReflect.Descriptor instead.
func (*DeleteTicketRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTicketRequest) GetId() *TicketID {
	if x != nil {
		return x.Id
	}
	return nil
}

// Response message for `DeleteTicket`
type DeleteTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTicketResponse) Reset() {
	*x = DeleteTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketResponse) ProtoMessage() {}

func (x *DeleteTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketResponse.ProtoReflect.Descriptor instead.
func (*DeleteTicketResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{9}
}

// Request message for `AddTicketTag`
type AddTicketTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket to add a tag to.
	TicketId *TicketID `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// The codes of the tag to add.
	TicketTags []*TicketTag `protobuf:"bytes,2,rep,name=ticket_tags,json=ticketTags,proto3" json:"ticket_tags,omitempty"`
}

func (x *AddTicketTagsRequest) Reset() {
	*x = AddTicketTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTicketTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTicketTagsRequest) ProtoMessage() {}

func (x *AddTicketTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTicketTagsRequest.ProtoReflect.Descriptor instead.
func (*AddTicketTagsRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{10}
}

func (x *AddTicketTagsRequest) GetTicketId() *TicketID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

func (x *AddTicketTagsRequest) GetTicketTags() []*TicketTag {
	if x != nil {
		return x.TicketTags
	}
	return nil
}

// Response message for `AddTicketTag`
type AddTicketTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTicketTagsResponse) Reset() {
	*x = AddTicketTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTicketTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTicketTagsResponse) ProtoMessage() {}

func (x *AddTicketTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTicketTagsResponse.ProtoReflect.Descriptor instead.
func (*AddTicketTagsResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{11}
}

// Request message for `ListTicketTags`
type ListTicketTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket to list tags for.
	TicketId *TicketID `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// Creation timestamp after which to query.
	BeforeTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=before_timestamp,json=beforeTimestamp,proto3,oneof" json:"before_timestamp,omitempty"`
	// The maximum number of products to return
	PageSize *int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *ListTicketTagsRequest) Reset() {
	*x = ListTicketTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketTagsRequest) ProtoMessage() {}

func (x *ListTicketTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketTagsRequest.ProtoReflect.Descriptor instead.
func (*ListTicketTagsRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{12}
}

func (x *ListTicketTagsRequest) GetTicketId() *TicketID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

func (x *ListTicketTagsRequest) GetBeforeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BeforeTimestamp
	}
	return nil
}

func (x *ListTicketTagsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

// Response message for `ListTicketTags`
type ListTicketTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tags
	TicketTags []*TicketTag `protobuf:"bytes,1,rep,name=ticket_tags,json=ticketTags,proto3" json:"ticket_tags,omitempty"`
}

func (x *ListTicketTagsResponse) Reset() {
	*x = ListTicketTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketTagsResponse) ProtoMessage() {}

func (x *ListTicketTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketTagsResponse.ProtoReflect.Descriptor instead.
func (*ListTicketTagsResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{13}
}

func (x *ListTicketTagsResponse) GetTicketTags() []*TicketTag {
	if x != nil {
		return x.TicketTags
	}
	return nil
}

// Request message for `RemoveTicketTags`
type DeleteTicketTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket to remove a tag from.
	TicketId *TicketID `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// The codes of the tag to remove.
	TagCodes []string `protobuf:"bytes,2,rep,name=tag_codes,json=tagCodes,proto3" json:"tag_codes,omitempty"`
}

func (x *DeleteTicketTagsRequest) Reset() {
	*x = DeleteTicketTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketTagsRequest) ProtoMessage() {}

func (x *DeleteTicketTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketTagsRequest.ProtoReflect.Descriptor instead.
func (*DeleteTicketTagsRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteTicketTagsRequest) GetTicketId() *TicketID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

func (x *DeleteTicketTagsRequest) GetTagCodes() []string {
	if x != nil {
		return x.TagCodes
	}
	return nil
}

// Response message for `RemoveTicketTags`
type DeleteTicketTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tags
	TicketTags []*TicketTag `protobuf:"bytes,1,rep,name=ticket_tags,json=ticketTags,proto3" json:"ticket_tags,omitempty"`
}

func (x *DeleteTicketTagsResponse) Reset() {
	*x = DeleteTicketTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTicketTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTicketTagsResponse) ProtoMessage() {}

func (x *DeleteTicketTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTicketTagsResponse.ProtoReflect.Descriptor instead.
func (*DeleteTicketTagsResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteTicketTagsResponse) GetTicketTags() []*TicketTag {
	if x != nil {
		return x.TicketTags
	}
	return nil
}

// Request message for `VerifyTicket`
type VerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket to verify.
	TicketId *TicketID `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// The code of the tag to verify.
	TagCode *TagCode `protobuf:"bytes,2,opt,name=tag_code,json=tagCode,proto3" json:"tag_code,omitempty"`
	// Whether the ticket is approved or not.
	Approved bool `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
	// Note
	Note string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *VerifyRequest) Reset() {
	*x = VerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRequest) ProtoMessage() {}

func (x *VerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRequest.ProtoReflect.Descriptor instead.
func (*VerifyRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{16}
}

func (x *VerifyRequest) GetTicketId() *TicketID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

func (x *VerifyRequest) GetTagCode() *TagCode {
	if x != nil {
		return x.TagCode
	}
	return nil
}

func (x *VerifyRequest) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *VerifyRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

// Response message for `VerifyTicket`
type VerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyResponse) Reset() {
	*x = VerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyResponse) ProtoMessage() {}

func (x *VerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyResponse.ProtoReflect.Descriptor instead.
func (*VerifyResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{17}
}

// Request message for `ListTicketVerifications`
type ListTicketVerificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket to list verifications for.
	TicketId *TicketID `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// Creation timestamp after which to query.
	BeforeTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=before_timestamp,json=beforeTimestamp,proto3,oneof" json:"before_timestamp,omitempty"`
	// The maximum number of products to return
	PageSize *int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *ListTicketVerificationsRequest) Reset() {
	*x = ListTicketVerificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketVerificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketVerificationsRequest) ProtoMessage() {}

func (x *ListTicketVerificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketVerificationsRequest.ProtoReflect.Descriptor instead.
func (*ListTicketVerificationsRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{18}
}

func (x *ListTicketVerificationsRequest) GetTicketId() *TicketID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

func (x *ListTicketVerificationsRequest) GetBeforeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BeforeTimestamp
	}
	return nil
}

func (x *ListTicketVerificationsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

// Response message for `ListTicketVerifications`
type ListTicketVerificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The verified tickets
	VerifiedTickets []*VerifiedTicket `protobuf:"bytes,1,rep,name=verified_tickets,json=verifiedTickets,proto3" json:"verified_tickets,omitempty"`
}

func (x *ListTicketVerificationsResponse) Reset() {
	*x = ListTicketVerificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketVerificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketVerificationsResponse) ProtoMessage() {}

func (x *ListTicketVerificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketVerificationsResponse.ProtoReflect.Descriptor instead.
func (*ListTicketVerificationsResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{19}
}

func (x *ListTicketVerificationsResponse) GetVerifiedTickets() []*VerifiedTicket {
	if x != nil {
		return x.VerifiedTickets
	}
	return nil
}

// Request message for `IsApproved`
type IsApprovedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket to check.
	TicketId *TicketID `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// additional optional tags
	TagCodes []*TagCode `protobuf:"bytes,2,rep,name=tag_codes,json=tagCodes,proto3" json:"tag_codes,omitempty"`
}

func (x *IsApprovedRequest) Reset() {
	*x = IsApprovedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsApprovedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsApprovedRequest) ProtoMessage() {}

func (x *IsApprovedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsApprovedRequest.ProtoReflect.Descriptor instead.
func (*IsApprovedRequest) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{20}
}

func (x *IsApprovedRequest) GetTicketId() *TicketID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

func (x *IsApprovedRequest) GetTagCodes() []*TagCode {
	if x != nil {
		return x.TagCodes
	}
	return nil
}

// Response message for `IsApproved`
type IsApprovedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the ticket is approved or not.
	Approved bool `protobuf:"varint,1,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (x *IsApprovedResponse) Reset() {
	*x = IsApprovedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsApprovedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsApprovedResponse) ProtoMessage() {}

func (x *IsApprovedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsApprovedResponse.ProtoReflect.Descriptor instead.
func (*IsApprovedResponse) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{21}
}

func (x *IsApprovedResponse) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

// A message representing a ticket ID
type TicketID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the ticket
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TicketID) Reset() {
	*x = TicketID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketID) ProtoMessage() {}

func (x *TicketID) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketID.ProtoReflect.Descriptor instead.
func (*TicketID) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{22}
}

func (x *TicketID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A message representing a ticket
type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket
	Id *TicketID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of the ticket
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The date the ticket was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The date the ticket was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{23}
}

func (x *Ticket) GetId() *TicketID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ticket) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Ticket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ticket) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// a message representing a ticketTag
type TicketTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The code of the tag
	TagCode *TagCode `protobuf:"bytes,1,opt,name=tag_code,json=tagCode,proto3" json:"tag_code,omitempty"`
	// Whether the tag is optional or not.
	Optional bool `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *TicketTag) Reset() {
	*x = TicketTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TicketTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketTag) ProtoMessage() {}

func (x *TicketTag) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketTag.ProtoReflect.Descriptor instead.
func (*TicketTag) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{24}
}

func (x *TicketTag) GetTagCode() *TagCode {
	if x != nil {
		return x.TagCode
	}
	return nil
}

func (x *TicketTag) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

// A message representing a verified ticket
type VerifiedTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the ticket
	TicketId *TicketID `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	// The verifier Id
	VerifierId *VerifierID `protobuf:"bytes,2,opt,name=verifier_id,json=verifierId,proto3" json:"verifier_id,omitempty"`
	// The code of the tag
	TagCode *TagCode `protobuf:"bytes,3,opt,name=tag_code,json=tagCode,proto3" json:"tag_code,omitempty"`
	// Whether the ticket is approved or not.
	Approved bool `protobuf:"varint,4,opt,name=approved,proto3" json:"approved,omitempty"`
	// Note
	Note *string `protobuf:"bytes,5,opt,name=note,proto3,oneof" json:"note,omitempty"`
}

func (x *VerifiedTicket) Reset() {
	*x = VerifiedTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_verify_v1_tickets_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiedTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiedTicket) ProtoMessage() {}

func (x *VerifiedTicket) ProtoReflect() protoreflect.Message {
	mi := &file_tap_verify_v1_tickets_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiedTicket.ProtoReflect.Descriptor instead.
func (*VerifiedTicket) Descriptor() ([]byte, []int) {
	return file_tap_verify_v1_tickets_proto_rawDescGZIP(), []int{25}
}

func (x *VerifiedTicket) GetTicketId() *TicketID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

func (x *VerifiedTicket) GetVerifierId() *VerifierID {
	if x != nil {
		return x.VerifierId
	}
	return nil
}

func (x *VerifiedTicket) GetTagCode() *TagCode {
	if x != nil {
		return x.TagCode
	}
	return nil
}

func (x *VerifiedTicket) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *VerifiedTicket) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

var File_tap_verify_v1_tickets_proto protoreflect.FileDescriptor

var file_tap_verify_v1_tickets_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x61, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74,
	0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x61, 0x70, 0x2f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x61, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x46, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x61, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x46, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x22, 0x74, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x55,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x49, 0x73,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x08,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x06, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a, 0x0a, 0x09, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xf3, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x61, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x74, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x32, 0xf5, 0x07, 0x0a, 0x0e, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x74,
	0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1f, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x74,
	0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x61, 0x70, 0x2e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x23, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x74,
	0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x2e,
	0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x20, 0x2e,
	0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0xb9, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62,
	0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x61, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x56, 0x58,
	0xaa, 0x02, 0x0d, 0x54, 0x61, 0x70, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0d, 0x54, 0x61, 0x70, 0x5c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x19, 0x54, 0x61, 0x70, 0x5c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x54,
	0x61, 0x70, 0x3a, 0x3a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tap_verify_v1_tickets_proto_rawDescOnce sync.Once
	file_tap_verify_v1_tickets_proto_rawDescData = file_tap_verify_v1_tickets_proto_rawDesc
)

func file_tap_verify_v1_tickets_proto_rawDescGZIP() []byte {
	file_tap_verify_v1_tickets_proto_rawDescOnce.Do(func() {
		file_tap_verify_v1_tickets_proto_rawDescData = protoimpl.X.CompressGZIP(file_tap_verify_v1_tickets_proto_rawDescData)
	})
	return file_tap_verify_v1_tickets_proto_rawDescData
}

var file_tap_verify_v1_tickets_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_tap_verify_v1_tickets_proto_goTypes = []interface{}{
	(*ListTicketsRequest)(nil),              // 0: tap.verify.v1.ListTicketsRequest
	(*ListTicketsResponse)(nil),             // 1: tap.verify.v1.ListTicketsResponse
	(*GetTicketRequest)(nil),                // 2: tap.verify.v1.GetTicketRequest
	(*GetTicketResponse)(nil),               // 3: tap.verify.v1.GetTicketResponse
	(*CreateTicketRequest)(nil),             // 4: tap.verify.v1.CreateTicketRequest
	(*CreateTicketResponse)(nil),            // 5: tap.verify.v1.CreateTicketResponse
	(*UpdateTicketRequest)(nil),             // 6: tap.verify.v1.UpdateTicketRequest
	(*UpdateTicketResponse)(nil),            // 7: tap.verify.v1.UpdateTicketResponse
	(*DeleteTicketRequest)(nil),             // 8: tap.verify.v1.DeleteTicketRequest
	(*DeleteTicketResponse)(nil),            // 9: tap.verify.v1.DeleteTicketResponse
	(*AddTicketTagsRequest)(nil),            // 10: tap.verify.v1.AddTicketTagsRequest
	(*AddTicketTagsResponse)(nil),           // 11: tap.verify.v1.AddTicketTagsResponse
	(*ListTicketTagsRequest)(nil),           // 12: tap.verify.v1.ListTicketTagsRequest
	(*ListTicketTagsResponse)(nil),          // 13: tap.verify.v1.ListTicketTagsResponse
	(*DeleteTicketTagsRequest)(nil),         // 14: tap.verify.v1.DeleteTicketTagsRequest
	(*DeleteTicketTagsResponse)(nil),        // 15: tap.verify.v1.DeleteTicketTagsResponse
	(*VerifyRequest)(nil),                   // 16: tap.verify.v1.VerifyRequest
	(*VerifyResponse)(nil),                  // 17: tap.verify.v1.VerifyResponse
	(*ListTicketVerificationsRequest)(nil),  // 18: tap.verify.v1.ListTicketVerificationsRequest
	(*ListTicketVerificationsResponse)(nil), // 19: tap.verify.v1.ListTicketVerificationsResponse
	(*IsApprovedRequest)(nil),               // 20: tap.verify.v1.IsApprovedRequest
	(*IsApprovedResponse)(nil),              // 21: tap.verify.v1.IsApprovedResponse
	(*TicketID)(nil),                        // 22: tap.verify.v1.TicketID
	(*Ticket)(nil),                          // 23: tap.verify.v1.Ticket
	(*TicketTag)(nil),                       // 24: tap.verify.v1.TicketTag
	(*VerifiedTicket)(nil),                  // 25: tap.verify.v1.VerifiedTicket
	(*timestamppb.Timestamp)(nil),           // 26: google.protobuf.Timestamp
	(*TagCode)(nil),                         // 27: tap.verify.v1.TagCode
	(*VerifierID)(nil),                      // 28: tap.verify.v1.VerifierID
}
var file_tap_verify_v1_tickets_proto_depIdxs = []int32{
	26, // 0: tap.verify.v1.ListTicketsRequest.before_timestamp:type_name -> google.protobuf.Timestamp
	23, // 1: tap.verify.v1.ListTicketsResponse.tickets:type_name -> tap.verify.v1.Ticket
	22, // 2: tap.verify.v1.GetTicketRequest.id:type_name -> tap.verify.v1.TicketID
	23, // 3: tap.verify.v1.GetTicketResponse.ticket:type_name -> tap.verify.v1.Ticket
	24, // 4: tap.verify.v1.CreateTicketRequest.tags:type_name -> tap.verify.v1.TicketTag
	23, // 5: tap.verify.v1.CreateTicketResponse.ticket:type_name -> tap.verify.v1.Ticket
	22, // 6: tap.verify.v1.UpdateTicketRequest.id:type_name -> tap.verify.v1.TicketID
	23, // 7: tap.verify.v1.UpdateTicketResponse.ticket:type_name -> tap.verify.v1.Ticket
	22, // 8: tap.verify.v1.DeleteTicketRequest.id:type_name -> tap.verify.v1.TicketID
	22, // 9: tap.verify.v1.AddTicketTagsRequest.ticket_id:type_name -> tap.verify.v1.TicketID
	24, // 10: tap.verify.v1.AddTicketTagsRequest.ticket_tags:type_name -> tap.verify.v1.TicketTag
	22, // 11: tap.verify.v1.ListTicketTagsRequest.ticket_id:type_name -> tap.verify.v1.TicketID
	26, // 12: tap.verify.v1.ListTicketTagsRequest.before_timestamp:type_name -> google.protobuf.Timestamp
	24, // 13: tap.verify.v1.ListTicketTagsResponse.ticket_tags:type_name -> tap.verify.v1.TicketTag
	22, // 14: tap.verify.v1.DeleteTicketTagsRequest.ticket_id:type_name -> tap.verify.v1.TicketID
	24, // 15: tap.verify.v1.DeleteTicketTagsResponse.ticket_tags:type_name -> tap.verify.v1.TicketTag
	22, // 16: tap.verify.v1.VerifyRequest.ticket_id:type_name -> tap.verify.v1.TicketID
	27, // 17: tap.verify.v1.VerifyRequest.tag_code:type_name -> tap.verify.v1.TagCode
	22, // 18: tap.verify.v1.ListTicketVerificationsRequest.ticket_id:type_name -> tap.verify.v1.TicketID
	26, // 19: tap.verify.v1.ListTicketVerificationsRequest.before_timestamp:type_name -> google.protobuf.Timestamp
	25, // 20: tap.verify.v1.ListTicketVerificationsResponse.verified_tickets:type_name -> tap.verify.v1.VerifiedTicket
	22, // 21: tap.verify.v1.IsApprovedRequest.ticket_id:type_name -> tap.verify.v1.TicketID
	27, // 22: tap.verify.v1.IsApprovedRequest.tag_codes:type_name -> tap.verify.v1.TagCode
	22, // 23: tap.verify.v1.Ticket.id:type_name -> tap.verify.v1.TicketID
	26, // 24: tap.verify.v1.Ticket.created_at:type_name -> google.protobuf.Timestamp
	26, // 25: tap.verify.v1.Ticket.updated_at:type_name -> google.protobuf.Timestamp
	27, // 26: tap.verify.v1.TicketTag.tag_code:type_name -> tap.verify.v1.TagCode
	22, // 27: tap.verify.v1.VerifiedTicket.ticket_id:type_name -> tap.verify.v1.TicketID
	28, // 28: tap.verify.v1.VerifiedTicket.verifier_id:type_name -> tap.verify.v1.VerifierID
	27, // 29: tap.verify.v1.VerifiedTicket.tag_code:type_name -> tap.verify.v1.TagCode
	0,  // 30: tap.verify.v1.TicketsService.ListTickets:input_type -> tap.verify.v1.ListTicketsRequest
	2,  // 31: tap.verify.v1.TicketsService.GetTicket:input_type -> tap.verify.v1.GetTicketRequest
	4,  // 32: tap.verify.v1.TicketsService.CreateTicket:input_type -> tap.verify.v1.CreateTicketRequest
	6,  // 33: tap.verify.v1.TicketsService.UpdateTicket:input_type -> tap.verify.v1.UpdateTicketRequest
	8,  // 34: tap.verify.v1.TicketsService.DeleteTicket:input_type -> tap.verify.v1.DeleteTicketRequest
	10, // 35: tap.verify.v1.TicketsService.AddTicketTags:input_type -> tap.verify.v1.AddTicketTagsRequest
	12, // 36: tap.verify.v1.TicketsService.ListTicketTags:input_type -> tap.verify.v1.ListTicketTagsRequest
	14, // 37: tap.verify.v1.TicketsService.DeleteTicketTags:input_type -> tap.verify.v1.DeleteTicketTagsRequest
	16, // 38: tap.verify.v1.TicketsService.Verify:input_type -> tap.verify.v1.VerifyRequest
	18, // 39: tap.verify.v1.TicketsService.ListTicketVerifications:input_type -> tap.verify.v1.ListTicketVerificationsRequest
	20, // 40: tap.verify.v1.TicketsService.IsApproved:input_type -> tap.verify.v1.IsApprovedRequest
	1,  // 41: tap.verify.v1.TicketsService.ListTickets:output_type -> tap.verify.v1.ListTicketsResponse
	3,  // 42: tap.verify.v1.TicketsService.GetTicket:output_type -> tap.verify.v1.GetTicketResponse
	5,  // 43: tap.verify.v1.TicketsService.CreateTicket:output_type -> tap.verify.v1.CreateTicketResponse
	7,  // 44: tap.verify.v1.TicketsService.UpdateTicket:output_type -> tap.verify.v1.UpdateTicketResponse
	9,  // 45: tap.verify.v1.TicketsService.DeleteTicket:output_type -> tap.verify.v1.DeleteTicketResponse
	11, // 46: tap.verify.v1.TicketsService.AddTicketTags:output_type -> tap.verify.v1.AddTicketTagsResponse
	13, // 47: tap.verify.v1.TicketsService.ListTicketTags:output_type -> tap.verify.v1.ListTicketTagsResponse
	15, // 48: tap.verify.v1.TicketsService.DeleteTicketTags:output_type -> tap.verify.v1.DeleteTicketTagsResponse
	17, // 49: tap.verify.v1.TicketsService.Verify:output_type -> tap.verify.v1.VerifyResponse
	19, // 50: tap.verify.v1.TicketsService.ListTicketVerifications:output_type -> tap.verify.v1.ListTicketVerificationsResponse
	21, // 51: tap.verify.v1.TicketsService.IsApproved:output_type -> tap.verify.v1.IsApprovedResponse
	41, // [41:52] is the sub-list for method output_type
	30, // [30:41] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_tap_verify_v1_tickets_proto_init() }
func file_tap_verify_v1_tickets_proto_init() {
	if File_tap_verify_v1_tickets_proto != nil {
		return
	}
	file_tap_verify_v1_tags_proto_init()
	file_tap_verify_v1_verifiers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tap_verify_v1_tickets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTicketTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTicketTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTicketTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketVerificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketVerificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsApprovedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsApprovedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TicketTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_verify_v1_tickets_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiedTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tap_verify_v1_tickets_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tap_verify_v1_tickets_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_tap_verify_v1_tickets_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_tap_verify_v1_tickets_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_tap_verify_v1_tickets_proto_msgTypes[25].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tap_verify_v1_tickets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tap_verify_v1_tickets_proto_goTypes,
		DependencyIndexes: file_tap_verify_v1_tickets_proto_depIdxs,
		MessageInfos:      file_tap_verify_v1_tickets_proto_msgTypes,
	}.Build()
	File_tap_verify_v1_tickets_proto = out.File
	file_tap_verify_v1_tickets_proto_rawDesc = nil
	file_tap_verify_v1_tickets_proto_goTypes = nil
	file_tap_verify_v1_tickets_proto_depIdxs = nil
}
