// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: tap/ads/v1/passes.proto

package adsv1

import (
	v1 "github.com/real-evolution/tapproto/lib/go/tap/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListPassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *v1.Page `protobuf:"bytes,15,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListPassesRequest) Reset() {
	*x = ListPassesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPassesRequest) ProtoMessage() {}

func (x *ListPassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPassesRequest.ProtoReflect.Descriptor instead.
func (*ListPassesRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{0}
}

func (x *ListPassesRequest) GetPage() *v1.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListPassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*Pass `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NextCursor []byte  `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
}

func (x *ListPassesResponse) Reset() {
	*x = ListPassesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPassesResponse) ProtoMessage() {}

func (x *ListPassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPassesResponse.ProtoReflect.Descriptor instead.
func (*ListPassesResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{1}
}

func (x *ListPassesResponse) GetItems() []*Pass {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListPassesResponse) GetNextCursor() []byte {
	if x != nil {
		return x.NextCursor
	}
	return nil
}

type GetPassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *PassID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPassRequest) Reset() {
	*x = GetPassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPassRequest) ProtoMessage() {}

func (x *GetPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPassRequest.ProtoReflect.Descriptor instead.
func (*GetPassRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{2}
}

func (x *GetPassRequest) GetId() *PassID {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pass *Pass `protobuf:"bytes,1,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *GetPassResponse) Reset() {
	*x = GetPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPassResponse) ProtoMessage() {}

func (x *GetPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPassResponse.ProtoReflect.Descriptor instead.
func (*GetPassResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{3}
}

func (x *GetPassResponse) GetPass() *Pass {
	if x != nil {
		return x.Pass
	}
	return nil
}

type CreatePassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MaxAds      int32  `protobuf:"varint,3,opt,name=max_ads,json=maxAds,proto3" json:"max_ads,omitempty"`
}

func (x *CreatePassRequest) Reset() {
	*x = CreatePassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePassRequest) ProtoMessage() {}

func (x *CreatePassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePassRequest.ProtoReflect.Descriptor instead.
func (*CreatePassRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePassRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreatePassRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePassRequest) GetMaxAds() int32 {
	if x != nil {
		return x.MaxAds
	}
	return 0
}

type CreatePassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pass *Pass `protobuf:"bytes,1,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *CreatePassResponse) Reset() {
	*x = CreatePassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePassResponse) ProtoMessage() {}

func (x *CreatePassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePassResponse.ProtoReflect.Descriptor instead.
func (*CreatePassResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePassResponse) GetPass() *Pass {
	if x != nil {
		return x.Pass
	}
	return nil
}

type UpdatePassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *PassID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	MaxAds      *int32  `protobuf:"varint,4,opt,name=max_ads,json=maxAds,proto3,oneof" json:"max_ads,omitempty"`
}

func (x *UpdatePassRequest) Reset() {
	*x = UpdatePassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePassRequest) ProtoMessage() {}

func (x *UpdatePassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePassRequest.ProtoReflect.Descriptor instead.
func (*UpdatePassRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePassRequest) GetId() *PassID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdatePassRequest) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *UpdatePassRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdatePassRequest) GetMaxAds() int32 {
	if x != nil && x.MaxAds != nil {
		return *x.MaxAds
	}
	return 0
}

type UpdatePassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pass *Pass `protobuf:"bytes,1,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *UpdatePassResponse) Reset() {
	*x = UpdatePassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePassResponse) ProtoMessage() {}

func (x *UpdatePassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePassResponse.ProtoReflect.Descriptor instead.
func (*UpdatePassResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePassResponse) GetPass() *Pass {
	if x != nil {
		return x.Pass
	}
	return nil
}

type DeletePassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *PassID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePassRequest) Reset() {
	*x = DeletePassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePassRequest) ProtoMessage() {}

func (x *DeletePassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePassRequest.ProtoReflect.Descriptor instead.
func (*DeletePassRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePassRequest) GetId() *PassID {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeletePassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePassResponse) Reset() {
	*x = DeletePassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePassResponse) ProtoMessage() {}

func (x *DeletePassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePassResponse.ProtoReflect.Descriptor instead.
func (*DeletePassResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{9}
}

type ListPassRequirementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassId *PassID `protobuf:"bytes,1,opt,name=pass_id,json=passId,proto3" json:"pass_id,omitempty"`
}

func (x *ListPassRequirementsRequest) Reset() {
	*x = ListPassRequirementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPassRequirementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPassRequirementsRequest) ProtoMessage() {}

func (x *ListPassRequirementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPassRequirementsRequest.ProtoReflect.Descriptor instead.
func (*ListPassRequirementsRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{10}
}

func (x *ListPassRequirementsRequest) GetPassId() *PassID {
	if x != nil {
		return x.PassId
	}
	return nil
}

type ListPassRequirementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Requirement `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListPassRequirementsResponse) Reset() {
	*x = ListPassRequirementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPassRequirementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPassRequirementsResponse) ProtoMessage() {}

func (x *ListPassRequirementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPassRequirementsResponse.ProtoReflect.Descriptor instead.
func (*ListPassRequirementsResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{11}
}

func (x *ListPassRequirementsResponse) GetItems() []*Requirement {
	if x != nil {
		return x.Items
	}
	return nil
}

type IsEligibleForPassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassId *PassID `protobuf:"bytes,1,opt,name=pass_id,json=passId,proto3" json:"pass_id,omitempty"`
}

func (x *IsEligibleForPassRequest) Reset() {
	*x = IsEligibleForPassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEligibleForPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEligibleForPassRequest) ProtoMessage() {}

func (x *IsEligibleForPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEligibleForPassRequest.ProtoReflect.Descriptor instead.
func (*IsEligibleForPassRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{12}
}

func (x *IsEligibleForPassRequest) GetPassId() *PassID {
	if x != nil {
		return x.PassId
	}
	return nil
}

type IsEligibleForPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eligible bool `protobuf:"varint,1,opt,name=eligible,proto3" json:"eligible,omitempty"`
}

func (x *IsEligibleForPassResponse) Reset() {
	*x = IsEligibleForPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEligibleForPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEligibleForPassResponse) ProtoMessage() {}

func (x *IsEligibleForPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEligibleForPassResponse.ProtoReflect.Descriptor instead.
func (*IsEligibleForPassResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{13}
}

func (x *IsEligibleForPassResponse) GetEligible() bool {
	if x != nil {
		return x.Eligible
	}
	return false
}

type AddRequirementToPassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassId        *PassID        `protobuf:"bytes,1,opt,name=pass_id,json=passId,proto3" json:"pass_id,omitempty"`
	RequirementId *RequirementID `protobuf:"bytes,2,opt,name=requirement_id,json=requirementId,proto3" json:"requirement_id,omitempty"`
}

func (x *AddRequirementToPassRequest) Reset() {
	*x = AddRequirementToPassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequirementToPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequirementToPassRequest) ProtoMessage() {}

func (x *AddRequirementToPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequirementToPassRequest.ProtoReflect.Descriptor instead.
func (*AddRequirementToPassRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{14}
}

func (x *AddRequirementToPassRequest) GetPassId() *PassID {
	if x != nil {
		return x.PassId
	}
	return nil
}

func (x *AddRequirementToPassRequest) GetRequirementId() *RequirementID {
	if x != nil {
		return x.RequirementId
	}
	return nil
}

type AddRequirementToPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddRequirementToPassResponse) Reset() {
	*x = AddRequirementToPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRequirementToPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequirementToPassResponse) ProtoMessage() {}

func (x *AddRequirementToPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequirementToPassResponse.ProtoReflect.Descriptor instead.
func (*AddRequirementToPassResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{15}
}

type RemoveRequirementFromPassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassId        *PassID        `protobuf:"bytes,1,opt,name=pass_id,json=passId,proto3" json:"pass_id,omitempty"`
	RequirementId *RequirementID `protobuf:"bytes,2,opt,name=requirement_id,json=requirementId,proto3" json:"requirement_id,omitempty"`
}

func (x *RemoveRequirementFromPassRequest) Reset() {
	*x = RemoveRequirementFromPassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequirementFromPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequirementFromPassRequest) ProtoMessage() {}

func (x *RemoveRequirementFromPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequirementFromPassRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequirementFromPassRequest) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveRequirementFromPassRequest) GetPassId() *PassID {
	if x != nil {
		return x.PassId
	}
	return nil
}

func (x *RemoveRequirementFromPassRequest) GetRequirementId() *RequirementID {
	if x != nil {
		return x.RequirementId
	}
	return nil
}

type RemoveRequirementFromPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveRequirementFromPassResponse) Reset() {
	*x = RemoveRequirementFromPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequirementFromPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequirementFromPassResponse) ProtoMessage() {}

func (x *RemoveRequirementFromPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequirementFromPassResponse.ProtoReflect.Descriptor instead.
func (*RemoveRequirementFromPassResponse) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{17}
}

type PassID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PassID) Reset() {
	*x = PassID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassID) ProtoMessage() {}

func (x *PassID) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassID.ProtoReflect.Descriptor instead.
func (*PassID) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{18}
}

func (x *PassID) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Pass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *PassID                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MaxAds      int32                  `protobuf:"varint,4,opt,name=max_ads,json=maxAds,proto3" json:"max_ads,omitempty"`
	CreateTime  *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Pass) Reset() {
	*x = Pass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_ads_v1_passes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pass) ProtoMessage() {}

func (x *Pass) ProtoReflect() protoreflect.Message {
	mi := &file_tap_ads_v1_passes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pass.ProtoReflect.Descriptor instead.
func (*Pass) Descriptor() ([]byte, []int) {
	return file_tap_ads_v1_passes_proto_rawDescGZIP(), []int{19}
}

func (x *Pass) GetId() *PassID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Pass) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Pass) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Pass) GetMaxAds() int32 {
	if x != nil {
		return x.MaxAds
	}
	return 0
}

func (x *Pass) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Pass) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

var File_tap_ads_v1_passes_proto protoreflect.FileDescriptor

var file_tap_ads_v1_passes_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x61, 0x70, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x61, 0x70, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x61, 0x70, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x61, 0x70, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x0f, 0x22, 0x72, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x34, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x64, 0x73, 0x22, 0x3a, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x73, 0x22, 0x3a, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x22, 0x37, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x52, 0x06, 0x70, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x47, 0x0a, 0x18, 0x49, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x49, 0x44, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x19,
	0x49, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a,
	0x06, 0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x88, 0x02,
	0x0a, 0x04, 0x50, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x0e, 0x32, 0xb9, 0x06, 0x0a, 0x0d, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x70, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x11, 0x49, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x69, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x19, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa3, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x74, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x61, 0x70, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x73,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x41, 0x58, 0xaa, 0x02, 0x0a, 0x54, 0x61, 0x70, 0x2e, 0x41,
	0x64, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x54, 0x61, 0x70, 0x5c, 0x41, 0x64, 0x73, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x16, 0x54, 0x61, 0x70, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x54, 0x61,
	0x70, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tap_ads_v1_passes_proto_rawDescOnce sync.Once
	file_tap_ads_v1_passes_proto_rawDescData = file_tap_ads_v1_passes_proto_rawDesc
)

func file_tap_ads_v1_passes_proto_rawDescGZIP() []byte {
	file_tap_ads_v1_passes_proto_rawDescOnce.Do(func() {
		file_tap_ads_v1_passes_proto_rawDescData = protoimpl.X.CompressGZIP(file_tap_ads_v1_passes_proto_rawDescData)
	})
	return file_tap_ads_v1_passes_proto_rawDescData
}

var file_tap_ads_v1_passes_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_tap_ads_v1_passes_proto_goTypes = []interface{}{
	(*ListPassesRequest)(nil),                 // 0: tap.ads.v1.ListPassesRequest
	(*ListPassesResponse)(nil),                // 1: tap.ads.v1.ListPassesResponse
	(*GetPassRequest)(nil),                    // 2: tap.ads.v1.GetPassRequest
	(*GetPassResponse)(nil),                   // 3: tap.ads.v1.GetPassResponse
	(*CreatePassRequest)(nil),                 // 4: tap.ads.v1.CreatePassRequest
	(*CreatePassResponse)(nil),                // 5: tap.ads.v1.CreatePassResponse
	(*UpdatePassRequest)(nil),                 // 6: tap.ads.v1.UpdatePassRequest
	(*UpdatePassResponse)(nil),                // 7: tap.ads.v1.UpdatePassResponse
	(*DeletePassRequest)(nil),                 // 8: tap.ads.v1.DeletePassRequest
	(*DeletePassResponse)(nil),                // 9: tap.ads.v1.DeletePassResponse
	(*ListPassRequirementsRequest)(nil),       // 10: tap.ads.v1.ListPassRequirementsRequest
	(*ListPassRequirementsResponse)(nil),      // 11: tap.ads.v1.ListPassRequirementsResponse
	(*IsEligibleForPassRequest)(nil),          // 12: tap.ads.v1.IsEligibleForPassRequest
	(*IsEligibleForPassResponse)(nil),         // 13: tap.ads.v1.IsEligibleForPassResponse
	(*AddRequirementToPassRequest)(nil),       // 14: tap.ads.v1.AddRequirementToPassRequest
	(*AddRequirementToPassResponse)(nil),      // 15: tap.ads.v1.AddRequirementToPassResponse
	(*RemoveRequirementFromPassRequest)(nil),  // 16: tap.ads.v1.RemoveRequirementFromPassRequest
	(*RemoveRequirementFromPassResponse)(nil), // 17: tap.ads.v1.RemoveRequirementFromPassResponse
	(*PassID)(nil),                            // 18: tap.ads.v1.PassID
	(*Pass)(nil),                              // 19: tap.ads.v1.Pass
	(*v1.Page)(nil),                           // 20: tap.types.v1.Page
	(*Requirement)(nil),                       // 21: tap.ads.v1.Requirement
	(*RequirementID)(nil),                     // 22: tap.ads.v1.RequirementID
	(*timestamppb.Timestamp)(nil),             // 23: google.protobuf.Timestamp
}
var file_tap_ads_v1_passes_proto_depIdxs = []int32{
	20, // 0: tap.ads.v1.ListPassesRequest.page:type_name -> tap.types.v1.Page
	19, // 1: tap.ads.v1.ListPassesResponse.items:type_name -> tap.ads.v1.Pass
	18, // 2: tap.ads.v1.GetPassRequest.id:type_name -> tap.ads.v1.PassID
	19, // 3: tap.ads.v1.GetPassResponse.pass:type_name -> tap.ads.v1.Pass
	19, // 4: tap.ads.v1.CreatePassResponse.pass:type_name -> tap.ads.v1.Pass
	18, // 5: tap.ads.v1.UpdatePassRequest.id:type_name -> tap.ads.v1.PassID
	19, // 6: tap.ads.v1.UpdatePassResponse.pass:type_name -> tap.ads.v1.Pass
	18, // 7: tap.ads.v1.DeletePassRequest.id:type_name -> tap.ads.v1.PassID
	18, // 8: tap.ads.v1.ListPassRequirementsRequest.pass_id:type_name -> tap.ads.v1.PassID
	21, // 9: tap.ads.v1.ListPassRequirementsResponse.items:type_name -> tap.ads.v1.Requirement
	18, // 10: tap.ads.v1.IsEligibleForPassRequest.pass_id:type_name -> tap.ads.v1.PassID
	18, // 11: tap.ads.v1.AddRequirementToPassRequest.pass_id:type_name -> tap.ads.v1.PassID
	22, // 12: tap.ads.v1.AddRequirementToPassRequest.requirement_id:type_name -> tap.ads.v1.RequirementID
	18, // 13: tap.ads.v1.RemoveRequirementFromPassRequest.pass_id:type_name -> tap.ads.v1.PassID
	22, // 14: tap.ads.v1.RemoveRequirementFromPassRequest.requirement_id:type_name -> tap.ads.v1.RequirementID
	18, // 15: tap.ads.v1.Pass.id:type_name -> tap.ads.v1.PassID
	23, // 16: tap.ads.v1.Pass.create_time:type_name -> google.protobuf.Timestamp
	23, // 17: tap.ads.v1.Pass.update_time:type_name -> google.protobuf.Timestamp
	0,  // 18: tap.ads.v1.PassesService.ListPasses:input_type -> tap.ads.v1.ListPassesRequest
	2,  // 19: tap.ads.v1.PassesService.GetPass:input_type -> tap.ads.v1.GetPassRequest
	4,  // 20: tap.ads.v1.PassesService.CreatePass:input_type -> tap.ads.v1.CreatePassRequest
	6,  // 21: tap.ads.v1.PassesService.UpdatePass:input_type -> tap.ads.v1.UpdatePassRequest
	8,  // 22: tap.ads.v1.PassesService.DeletePass:input_type -> tap.ads.v1.DeletePassRequest
	10, // 23: tap.ads.v1.PassesService.ListPassRequirements:input_type -> tap.ads.v1.ListPassRequirementsRequest
	12, // 24: tap.ads.v1.PassesService.IsEligibleForPass:input_type -> tap.ads.v1.IsEligibleForPassRequest
	14, // 25: tap.ads.v1.PassesService.AddRequirementToPass:input_type -> tap.ads.v1.AddRequirementToPassRequest
	16, // 26: tap.ads.v1.PassesService.RemoveRequirementFromPass:input_type -> tap.ads.v1.RemoveRequirementFromPassRequest
	1,  // 27: tap.ads.v1.PassesService.ListPasses:output_type -> tap.ads.v1.ListPassesResponse
	3,  // 28: tap.ads.v1.PassesService.GetPass:output_type -> tap.ads.v1.GetPassResponse
	5,  // 29: tap.ads.v1.PassesService.CreatePass:output_type -> tap.ads.v1.CreatePassResponse
	7,  // 30: tap.ads.v1.PassesService.UpdatePass:output_type -> tap.ads.v1.UpdatePassResponse
	9,  // 31: tap.ads.v1.PassesService.DeletePass:output_type -> tap.ads.v1.DeletePassResponse
	11, // 32: tap.ads.v1.PassesService.ListPassRequirements:output_type -> tap.ads.v1.ListPassRequirementsResponse
	13, // 33: tap.ads.v1.PassesService.IsEligibleForPass:output_type -> tap.ads.v1.IsEligibleForPassResponse
	15, // 34: tap.ads.v1.PassesService.AddRequirementToPass:output_type -> tap.ads.v1.AddRequirementToPassResponse
	17, // 35: tap.ads.v1.PassesService.RemoveRequirementFromPass:output_type -> tap.ads.v1.RemoveRequirementFromPassResponse
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_tap_ads_v1_passes_proto_init() }
func file_tap_ads_v1_passes_proto_init() {
	if File_tap_ads_v1_passes_proto != nil {
		return
	}
	file_tap_ads_v1_requirements_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tap_ads_v1_passes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPassesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPassesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPassRequirementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPassRequirementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEligibleForPassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEligibleForPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequirementToPassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRequirementToPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequirementFromPassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequirementFromPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_ads_v1_passes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tap_ads_v1_passes_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tap_ads_v1_passes_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tap_ads_v1_passes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tap_ads_v1_passes_proto_goTypes,
		DependencyIndexes: file_tap_ads_v1_passes_proto_depIdxs,
		MessageInfos:      file_tap_ads_v1_passes_proto_msgTypes,
	}.Build()
	File_tap_ads_v1_passes_proto = out.File
	file_tap_ads_v1_passes_proto_rawDesc = nil
	file_tap_ads_v1_passes_proto_goTypes = nil
	file_tap_ads_v1_passes_proto_depIdxs = nil
}
