// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: tap/ads/v1/listings.proto

package adsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ListingsService_ListListings_FullMethodName    = "/tap.ads.v1.ListingsService/ListListings"
	ListingsService_GetListing_FullMethodName      = "/tap.ads.v1.ListingsService/GetListing"
	ListingsService_CreateListing_FullMethodName   = "/tap.ads.v1.ListingsService/CreateListing"
	ListingsService_DeleteListing_FullMethodName   = "/tap.ads.v1.ListingsService/DeleteListing"
	ListingsService_PurchaseListing_FullMethodName = "/tap.ads.v1.ListingsService/PurchaseListing"
	ListingsService_ListPurchases_FullMethodName   = "/tap.ads.v1.ListingsService/ListPurchases"
)

// ListingsServiceClient is the client API for ListingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListingsServiceClient interface {
	ListListings(ctx context.Context, in *ListListingsRequest, opts ...grpc.CallOption) (*ListListingsResponse, error)
	GetListing(ctx context.Context, in *GetListingRequest, opts ...grpc.CallOption) (*GetListingResponse, error)
	CreateListing(ctx context.Context, in *CreateListingRequest, opts ...grpc.CallOption) (*CreateListingResponse, error)
	DeleteListing(ctx context.Context, in *DeleteListingRequest, opts ...grpc.CallOption) (*DeleteListingResponse, error)
	PurchaseListing(ctx context.Context, in *PurchaseListingRequest, opts ...grpc.CallOption) (*PurchaseListingResponse, error)
	ListPurchases(ctx context.Context, in *ListPurchasesRequest, opts ...grpc.CallOption) (*ListPurchasesResponse, error)
}

type listingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListingsServiceClient(cc grpc.ClientConnInterface) ListingsServiceClient {
	return &listingsServiceClient{cc}
}

func (c *listingsServiceClient) ListListings(ctx context.Context, in *ListListingsRequest, opts ...grpc.CallOption) (*ListListingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListListingsResponse)
	err := c.cc.Invoke(ctx, ListingsService_ListListings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsServiceClient) GetListing(ctx context.Context, in *GetListingRequest, opts ...grpc.CallOption) (*GetListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListingResponse)
	err := c.cc.Invoke(ctx, ListingsService_GetListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsServiceClient) CreateListing(ctx context.Context, in *CreateListingRequest, opts ...grpc.CallOption) (*CreateListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateListingResponse)
	err := c.cc.Invoke(ctx, ListingsService_CreateListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsServiceClient) DeleteListing(ctx context.Context, in *DeleteListingRequest, opts ...grpc.CallOption) (*DeleteListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteListingResponse)
	err := c.cc.Invoke(ctx, ListingsService_DeleteListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsServiceClient) PurchaseListing(ctx context.Context, in *PurchaseListingRequest, opts ...grpc.CallOption) (*PurchaseListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseListingResponse)
	err := c.cc.Invoke(ctx, ListingsService_PurchaseListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listingsServiceClient) ListPurchases(ctx context.Context, in *ListPurchasesRequest, opts ...grpc.CallOption) (*ListPurchasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPurchasesResponse)
	err := c.cc.Invoke(ctx, ListingsService_ListPurchases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListingsServiceServer is the server API for ListingsService service.
// All implementations must embed UnimplementedListingsServiceServer
// for forward compatibility
type ListingsServiceServer interface {
	ListListings(context.Context, *ListListingsRequest) (*ListListingsResponse, error)
	GetListing(context.Context, *GetListingRequest) (*GetListingResponse, error)
	CreateListing(context.Context, *CreateListingRequest) (*CreateListingResponse, error)
	DeleteListing(context.Context, *DeleteListingRequest) (*DeleteListingResponse, error)
	PurchaseListing(context.Context, *PurchaseListingRequest) (*PurchaseListingResponse, error)
	ListPurchases(context.Context, *ListPurchasesRequest) (*ListPurchasesResponse, error)
	mustEmbedUnimplementedListingsServiceServer()
}

// UnimplementedListingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedListingsServiceServer struct {
}

func (UnimplementedListingsServiceServer) ListListings(context.Context, *ListListingsRequest) (*ListListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListings not implemented")
}
func (UnimplementedListingsServiceServer) GetListing(context.Context, *GetListingRequest) (*GetListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListing not implemented")
}
func (UnimplementedListingsServiceServer) CreateListing(context.Context, *CreateListingRequest) (*CreateListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListing not implemented")
}
func (UnimplementedListingsServiceServer) DeleteListing(context.Context, *DeleteListingRequest) (*DeleteListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListing not implemented")
}
func (UnimplementedListingsServiceServer) PurchaseListing(context.Context, *PurchaseListingRequest) (*PurchaseListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseListing not implemented")
}
func (UnimplementedListingsServiceServer) ListPurchases(context.Context, *ListPurchasesRequest) (*ListPurchasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPurchases not implemented")
}
func (UnimplementedListingsServiceServer) mustEmbedUnimplementedListingsServiceServer() {}

// UnsafeListingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListingsServiceServer will
// result in compilation errors.
type UnsafeListingsServiceServer interface {
	mustEmbedUnimplementedListingsServiceServer()
}

func RegisterListingsServiceServer(s grpc.ServiceRegistrar, srv ListingsServiceServer) {
	s.RegisterService(&ListingsService_ServiceDesc, srv)
}

func _ListingsService_ListListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).ListListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_ListListings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).ListListings(ctx, req.(*ListListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsService_GetListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).GetListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_GetListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).GetListing(ctx, req.(*GetListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsService_CreateListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).CreateListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_CreateListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).CreateListing(ctx, req.(*CreateListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsService_DeleteListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).DeleteListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_DeleteListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).DeleteListing(ctx, req.(*DeleteListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsService_PurchaseListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).PurchaseListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_PurchaseListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).PurchaseListing(ctx, req.(*PurchaseListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListingsService_ListPurchases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPurchasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListingsServiceServer).ListPurchases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListingsService_ListPurchases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListingsServiceServer).ListPurchases(ctx, req.(*ListPurchasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListingsService_ServiceDesc is the grpc.ServiceDesc for ListingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tap.ads.v1.ListingsService",
	HandlerType: (*ListingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListListings",
			Handler:    _ListingsService_ListListings_Handler,
		},
		{
			MethodName: "GetListing",
			Handler:    _ListingsService_GetListing_Handler,
		},
		{
			MethodName: "CreateListing",
			Handler:    _ListingsService_CreateListing_Handler,
		},
		{
			MethodName: "DeleteListing",
			Handler:    _ListingsService_DeleteListing_Handler,
		},
		{
			MethodName: "PurchaseListing",
			Handler:    _ListingsService_PurchaseListing_Handler,
		},
		{
			MethodName: "ListPurchases",
			Handler:    _ListingsService_ListPurchases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tap/ads/v1/listings.proto",
}
