// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: tap/points/v1/treasuries.proto

package pointsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TreasuriesService_ListTreasuries_FullMethodName = "/tap.points.v1.TreasuriesService/ListTreasuries"
	TreasuriesService_GetTreasury_FullMethodName    = "/tap.points.v1.TreasuriesService/GetTreasury"
	TreasuriesService_CreateTreasury_FullMethodName = "/tap.points.v1.TreasuriesService/CreateTreasury"
	TreasuriesService_UpdateTreasury_FullMethodName = "/tap.points.v1.TreasuriesService/UpdateTreasury"
	TreasuriesService_DeleteTreasury_FullMethodName = "/tap.points.v1.TreasuriesService/DeleteTreasury"
)

// TreasuriesServiceClient is the client API for TreasuriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreasuriesServiceClient interface {
	// Lists treasuries.
	ListTreasuries(ctx context.Context, in *ListTreasuriesRequest, opts ...grpc.CallOption) (*ListTreasuriesResponse, error)
	// Gets a treasury.
	GetTreasury(ctx context.Context, in *GetTreasuryRequest, opts ...grpc.CallOption) (*GetTreasuryResponse, error)
	// Creates a treasury.
	CreateTreasury(ctx context.Context, in *CreateTreasuryRequest, opts ...grpc.CallOption) (*CreateTreasuryResponse, error)
	// Updates a treasury.
	UpdateTreasury(ctx context.Context, in *UpdateTreasuryRequest, opts ...grpc.CallOption) (*UpdateTreasuryResponse, error)
	// Deletes a treasury.
	DeleteTreasury(ctx context.Context, in *DeleteTreasuryRequest, opts ...grpc.CallOption) (*DeleteTreasuryResponse, error)
}

type treasuriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreasuriesServiceClient(cc grpc.ClientConnInterface) TreasuriesServiceClient {
	return &treasuriesServiceClient{cc}
}

func (c *treasuriesServiceClient) ListTreasuries(ctx context.Context, in *ListTreasuriesRequest, opts ...grpc.CallOption) (*ListTreasuriesResponse, error) {
	out := new(ListTreasuriesResponse)
	err := c.cc.Invoke(ctx, TreasuriesService_ListTreasuries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasuriesServiceClient) GetTreasury(ctx context.Context, in *GetTreasuryRequest, opts ...grpc.CallOption) (*GetTreasuryResponse, error) {
	out := new(GetTreasuryResponse)
	err := c.cc.Invoke(ctx, TreasuriesService_GetTreasury_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasuriesServiceClient) CreateTreasury(ctx context.Context, in *CreateTreasuryRequest, opts ...grpc.CallOption) (*CreateTreasuryResponse, error) {
	out := new(CreateTreasuryResponse)
	err := c.cc.Invoke(ctx, TreasuriesService_CreateTreasury_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasuriesServiceClient) UpdateTreasury(ctx context.Context, in *UpdateTreasuryRequest, opts ...grpc.CallOption) (*UpdateTreasuryResponse, error) {
	out := new(UpdateTreasuryResponse)
	err := c.cc.Invoke(ctx, TreasuriesService_UpdateTreasury_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasuriesServiceClient) DeleteTreasury(ctx context.Context, in *DeleteTreasuryRequest, opts ...grpc.CallOption) (*DeleteTreasuryResponse, error) {
	out := new(DeleteTreasuryResponse)
	err := c.cc.Invoke(ctx, TreasuriesService_DeleteTreasury_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreasuriesServiceServer is the server API for TreasuriesService service.
// All implementations must embed UnimplementedTreasuriesServiceServer
// for forward compatibility
type TreasuriesServiceServer interface {
	// Lists treasuries.
	ListTreasuries(context.Context, *ListTreasuriesRequest) (*ListTreasuriesResponse, error)
	// Gets a treasury.
	GetTreasury(context.Context, *GetTreasuryRequest) (*GetTreasuryResponse, error)
	// Creates a treasury.
	CreateTreasury(context.Context, *CreateTreasuryRequest) (*CreateTreasuryResponse, error)
	// Updates a treasury.
	UpdateTreasury(context.Context, *UpdateTreasuryRequest) (*UpdateTreasuryResponse, error)
	// Deletes a treasury.
	DeleteTreasury(context.Context, *DeleteTreasuryRequest) (*DeleteTreasuryResponse, error)
	mustEmbedUnimplementedTreasuriesServiceServer()
}

// UnimplementedTreasuriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreasuriesServiceServer struct {
}

func (UnimplementedTreasuriesServiceServer) ListTreasuries(context.Context, *ListTreasuriesRequest) (*ListTreasuriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTreasuries not implemented")
}
func (UnimplementedTreasuriesServiceServer) GetTreasury(context.Context, *GetTreasuryRequest) (*GetTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreasury not implemented")
}
func (UnimplementedTreasuriesServiceServer) CreateTreasury(context.Context, *CreateTreasuryRequest) (*CreateTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTreasury not implemented")
}
func (UnimplementedTreasuriesServiceServer) UpdateTreasury(context.Context, *UpdateTreasuryRequest) (*UpdateTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTreasury not implemented")
}
func (UnimplementedTreasuriesServiceServer) DeleteTreasury(context.Context, *DeleteTreasuryRequest) (*DeleteTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTreasury not implemented")
}
func (UnimplementedTreasuriesServiceServer) mustEmbedUnimplementedTreasuriesServiceServer() {}

// UnsafeTreasuriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreasuriesServiceServer will
// result in compilation errors.
type UnsafeTreasuriesServiceServer interface {
	mustEmbedUnimplementedTreasuriesServiceServer()
}

func RegisterTreasuriesServiceServer(s grpc.ServiceRegistrar, srv TreasuriesServiceServer) {
	s.RegisterService(&TreasuriesService_ServiceDesc, srv)
}

func _TreasuriesService_ListTreasuries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreasuriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuriesServiceServer).ListTreasuries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreasuriesService_ListTreasuries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuriesServiceServer).ListTreasuries(ctx, req.(*ListTreasuriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreasuriesService_GetTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuriesServiceServer).GetTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreasuriesService_GetTreasury_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuriesServiceServer).GetTreasury(ctx, req.(*GetTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreasuriesService_CreateTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuriesServiceServer).CreateTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreasuriesService_CreateTreasury_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuriesServiceServer).CreateTreasury(ctx, req.(*CreateTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreasuriesService_UpdateTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuriesServiceServer).UpdateTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreasuriesService_UpdateTreasury_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuriesServiceServer).UpdateTreasury(ctx, req.(*UpdateTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreasuriesService_DeleteTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuriesServiceServer).DeleteTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreasuriesService_DeleteTreasury_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuriesServiceServer).DeleteTreasury(ctx, req.(*DeleteTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreasuriesService_ServiceDesc is the grpc.ServiceDesc for TreasuriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreasuriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tap.points.v1.TreasuriesService",
	HandlerType: (*TreasuriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTreasuries",
			Handler:    _TreasuriesService_ListTreasuries_Handler,
		},
		{
			MethodName: "GetTreasury",
			Handler:    _TreasuriesService_GetTreasury_Handler,
		},
		{
			MethodName: "CreateTreasury",
			Handler:    _TreasuriesService_CreateTreasury_Handler,
		},
		{
			MethodName: "UpdateTreasury",
			Handler:    _TreasuriesService_UpdateTreasury_Handler,
		},
		{
			MethodName: "DeleteTreasury",
			Handler:    _TreasuriesService_DeleteTreasury_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tap/points/v1/treasuries.proto",
}
