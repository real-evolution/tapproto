// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: tap/points/v1/openings.proto

package pointsv1

import (
	v1 "github.com/real-evolution/tapproto/lib/go/tap/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for `ListOpenings`.
type ListOpeningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by treasury id.
	TreasuryId *TreasuryID `protobuf:"bytes,1,opt,name=treasury_id,json=treasuryId,proto3,oneof" json:"treasury_id,omitempty"`
	// Filter by source token code.
	SrcTokenCode *TokenCode `protobuf:"bytes,2,opt,name=src_token_code,json=srcTokenCode,proto3,oneof" json:"src_token_code,omitempty"`
	// Filter by destination token code.
	DstTokenCode *TokenCode `protobuf:"bytes,3,opt,name=dst_token_code,json=dstTokenCode,proto3,oneof" json:"dst_token_code,omitempty"`
	// Filter by cancel status.
	CanceledBefore *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=canceled_before,json=canceledBefore,proto3,oneof" json:"canceled_before,omitempty"`
	// Filter by expiry status.
	ExpiredBefore *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expired_before,json=expiredBefore,proto3,oneof" json:"expired_before,omitempty"`
	// Pagination paramseters.
	Page *v1.Page `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListOpeningsRequest) Reset() {
	*x = ListOpeningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpeningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpeningsRequest) ProtoMessage() {}

func (x *ListOpeningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpeningsRequest.ProtoReflect.Descriptor instead.
func (*ListOpeningsRequest) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{0}
}

func (x *ListOpeningsRequest) GetTreasuryId() *TreasuryID {
	if x != nil {
		return x.TreasuryId
	}
	return nil
}

func (x *ListOpeningsRequest) GetSrcTokenCode() *TokenCode {
	if x != nil {
		return x.SrcTokenCode
	}
	return nil
}

func (x *ListOpeningsRequest) GetDstTokenCode() *TokenCode {
	if x != nil {
		return x.DstTokenCode
	}
	return nil
}

func (x *ListOpeningsRequest) GetCanceledBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledBefore
	}
	return nil
}

func (x *ListOpeningsRequest) GetExpiredBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredBefore
	}
	return nil
}

func (x *ListOpeningsRequest) GetPage() *v1.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

// Response message for `ListOpenings`.
type ListOpeningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The openings.
	Items []*Opening `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// The next page cursor.
	NextCursor []byte `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
}

func (x *ListOpeningsResponse) Reset() {
	*x = ListOpeningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOpeningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOpeningsResponse) ProtoMessage() {}

func (x *ListOpeningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOpeningsResponse.ProtoReflect.Descriptor instead.
func (*ListOpeningsResponse) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{1}
}

func (x *ListOpeningsResponse) GetItems() []*Opening {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListOpeningsResponse) GetNextCursor() []byte {
	if x != nil {
		return x.NextCursor
	}
	return nil
}

// Request message for `GetOpening`.
type GetOpeningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The opening id.
	Id *OpeningID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOpeningRequest) Reset() {
	*x = GetOpeningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpeningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpeningRequest) ProtoMessage() {}

func (x *GetOpeningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpeningRequest.ProtoReflect.Descriptor instead.
func (*GetOpeningRequest) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{2}
}

func (x *GetOpeningRequest) GetId() *OpeningID {
	if x != nil {
		return x.Id
	}
	return nil
}

// Response message for `GetOpening`.
type GetOpeningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opening *Opening `protobuf:"bytes,1,opt,name=opening,proto3" json:"opening,omitempty"`
}

func (x *GetOpeningResponse) Reset() {
	*x = GetOpeningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpeningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpeningResponse) ProtoMessage() {}

func (x *GetOpeningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpeningResponse.ProtoReflect.Descriptor instead.
func (*GetOpeningResponse) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{3}
}

func (x *GetOpeningResponse) GetOpening() *Opening {
	if x != nil {
		return x.Opening
	}
	return nil
}

// Request message for `HasActiveOpening`.
type HasActiveOpeningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opening source token code.
	SrcTokenCode *TokenCode `protobuf:"bytes,1,opt,name=src_token_code,json=srcTokenCode,proto3" json:"src_token_code,omitempty"`
	// Opening destination token code.
	DstTokenCode *TokenCode `protobuf:"bytes,2,opt,name=dst_token_code,json=dstTokenCode,proto3" json:"dst_token_code,omitempty"`
	// Opening open time.
	OpenTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=open_time,json=openTime,proto3,oneof" json:"open_time,omitempty"`
	// Opening close time.
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3,oneof" json:"close_time,omitempty"`
}

func (x *HasActiveOpeningRequest) Reset() {
	*x = HasActiveOpeningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasActiveOpeningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasActiveOpeningRequest) ProtoMessage() {}

func (x *HasActiveOpeningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasActiveOpeningRequest.ProtoReflect.Descriptor instead.
func (*HasActiveOpeningRequest) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{4}
}

func (x *HasActiveOpeningRequest) GetSrcTokenCode() *TokenCode {
	if x != nil {
		return x.SrcTokenCode
	}
	return nil
}

func (x *HasActiveOpeningRequest) GetDstTokenCode() *TokenCode {
	if x != nil {
		return x.DstTokenCode
	}
	return nil
}

func (x *HasActiveOpeningRequest) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *HasActiveOpeningRequest) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

// Response message for `HasActiveOpening`.
type HasActiveOpeningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether there is an active opening.
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *HasActiveOpeningResponse) Reset() {
	*x = HasActiveOpeningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasActiveOpeningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasActiveOpeningResponse) ProtoMessage() {}

func (x *HasActiveOpeningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasActiveOpeningResponse.ProtoReflect.Descriptor instead.
func (*HasActiveOpeningResponse) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{5}
}

func (x *HasActiveOpeningResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Request message for `CreateOpening`.
type CreateOpeningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opening optional label.
	Label *string `protobuf:"bytes,1,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// Transfers from `src_token_code` to `dst_token_code` exchange rate.
	ExchangeRate *v1.Decimal `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Opening source token code.
	SrcTokenCode *TokenCode `protobuf:"bytes,3,opt,name=src_token_code,json=srcTokenCode,proto3" json:"src_token_code,omitempty"`
	// Opening destination token code.
	DstTokenCode *TokenCode `protobuf:"bytes,4,opt,name=dst_token_code,json=dstTokenCode,proto3" json:"dst_token_code,omitempty"`
	// Opening start time.
	OpenTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	// Opening close time.
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
}

func (x *CreateOpeningRequest) Reset() {
	*x = CreateOpeningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpeningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpeningRequest) ProtoMessage() {}

func (x *CreateOpeningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpeningRequest.ProtoReflect.Descriptor instead.
func (*CreateOpeningRequest) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOpeningRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *CreateOpeningRequest) GetExchangeRate() *v1.Decimal {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *CreateOpeningRequest) GetSrcTokenCode() *TokenCode {
	if x != nil {
		return x.SrcTokenCode
	}
	return nil
}

func (x *CreateOpeningRequest) GetDstTokenCode() *TokenCode {
	if x != nil {
		return x.DstTokenCode
	}
	return nil
}

func (x *CreateOpeningRequest) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *CreateOpeningRequest) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

// Response message for `CreateOpening`.
type CreateOpeningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The opening.
	Opening *Opening `protobuf:"bytes,1,opt,name=opening,proto3" json:"opening,omitempty"`
}

func (x *CreateOpeningResponse) Reset() {
	*x = CreateOpeningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpeningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpeningResponse) ProtoMessage() {}

func (x *CreateOpeningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpeningResponse.ProtoReflect.Descriptor instead.
func (*CreateOpeningResponse) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{7}
}

func (x *CreateOpeningResponse) GetOpening() *Opening {
	if x != nil {
		return x.Opening
	}
	return nil
}

// Request message for `CancelOpening`.
type CancelOpeningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The opening id.
	Id *OpeningID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelOpeningRequest) Reset() {
	*x = CancelOpeningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOpeningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOpeningRequest) ProtoMessage() {}

func (x *CancelOpeningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOpeningRequest.ProtoReflect.Descriptor instead.
func (*CancelOpeningRequest) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{8}
}

func (x *CancelOpeningRequest) GetId() *OpeningID {
	if x != nil {
		return x.Id
	}
	return nil
}

// Response message for `CancelOpening`.
type CancelOpeningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The opening.
	Opening *Opening `protobuf:"bytes,1,opt,name=opening,proto3" json:"opening,omitempty"`
}

func (x *CancelOpeningResponse) Reset() {
	*x = CancelOpeningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOpeningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOpeningResponse) ProtoMessage() {}

func (x *CancelOpeningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOpeningResponse.ProtoReflect.Descriptor instead.
func (*CancelOpeningResponse) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{9}
}

func (x *CancelOpeningResponse) GetOpening() *Opening {
	if x != nil {
		return x.Opening
	}
	return nil
}

// A message representing an opening id.
type OpeningID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OpeningID) Reset() {
	*x = OpeningID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpeningID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpeningID) ProtoMessage() {}

func (x *OpeningID) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpeningID.ProtoReflect.Descriptor instead.
func (*OpeningID) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{10}
}

func (x *OpeningID) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A message representing an opening.
type Opening struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The opening id.
	Id *OpeningID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The opening exchange rate.
	ExchangeRate *v1.Decimal `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	// Opening optional label.
	Label *string `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// Opening start time.
	OpenTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=open_time,json=openTime,proto3,oneof" json:"open_time,omitempty"`
	// Opening end time.
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=close_time,json=closeTime,proto3,oneof" json:"close_time,omitempty"`
	// Opening cancel time.
	CancelTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=cancel_time,json=cancelTime,proto3,oneof" json:"cancel_time,omitempty"`
	// The source token code that is being exchanged.
	SrcTokenCode *TokenCode `protobuf:"bytes,7,opt,name=src_token_code,json=srcTokenCode,proto3" json:"src_token_code,omitempty"`
	// The destination token code that is being exchanged.
	DstTokenCode *TokenCode `protobuf:"bytes,8,opt,name=dst_token_code,json=dstTokenCode,proto3" json:"dst_token_code,omitempty"`
	// The time when the opening was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Opening) Reset() {
	*x = Opening{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tap_points_v1_openings_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Opening) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Opening) ProtoMessage() {}

func (x *Opening) ProtoReflect() protoreflect.Message {
	mi := &file_tap_points_v1_openings_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Opening.ProtoReflect.Descriptor instead.
func (*Opening) Descriptor() ([]byte, []int) {
	return file_tap_points_v1_openings_proto_rawDescGZIP(), []int{11}
}

func (x *Opening) GetId() *OpeningID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Opening) GetExchangeRate() *v1.Decimal {
	if x != nil {
		return x.ExchangeRate
	}
	return nil
}

func (x *Opening) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Opening) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *Opening) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Opening) GetCancelTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelTime
	}
	return nil
}

func (x *Opening) GetSrcTokenCode() *TokenCode {
	if x != nil {
		return x.SrcTokenCode
	}
	return nil
}

func (x *Opening) GetDstTokenCode() *TokenCode {
	if x != nil {
		return x.DstTokenCode
	}
	return nil
}

func (x *Opening) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

var File_tap_points_v1_openings_proto protoreflect.FileDescriptor

var file_tap_points_v1_openings_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x61, 0x70, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x74, 0x61, 0x70, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x61, 0x70, 0x2f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x61, 0x70, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x61, 0x70, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0b, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x01, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52,
	0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22,
	0x7a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x3d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0xb4, 0x02, 0x0a, 0x17, 0x48, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x73, 0x72, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e,
	0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x64, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x48, 0x61, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xeb, 0x02,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0c, 0x73, 0x72, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x0e, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0c, 0x64, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x49, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x22, 0x21, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xda, 0x03, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x74, 0x61,
	0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e,
	0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x70, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0xba, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x70,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x65, 0x76, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x61, 0x70, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x54, 0x50, 0x58, 0xaa, 0x02, 0x0d, 0x54, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x61, 0x70, 0x5c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x54, 0x61, 0x70, 0x5c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0f, 0x54, 0x61, 0x70, 0x3a, 0x3a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tap_points_v1_openings_proto_rawDescOnce sync.Once
	file_tap_points_v1_openings_proto_rawDescData = file_tap_points_v1_openings_proto_rawDesc
)

func file_tap_points_v1_openings_proto_rawDescGZIP() []byte {
	file_tap_points_v1_openings_proto_rawDescOnce.Do(func() {
		file_tap_points_v1_openings_proto_rawDescData = protoimpl.X.CompressGZIP(file_tap_points_v1_openings_proto_rawDescData)
	})
	return file_tap_points_v1_openings_proto_rawDescData
}

var file_tap_points_v1_openings_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tap_points_v1_openings_proto_goTypes = []interface{}{
	(*ListOpeningsRequest)(nil),      // 0: tap.points.v1.ListOpeningsRequest
	(*ListOpeningsResponse)(nil),     // 1: tap.points.v1.ListOpeningsResponse
	(*GetOpeningRequest)(nil),        // 2: tap.points.v1.GetOpeningRequest
	(*GetOpeningResponse)(nil),       // 3: tap.points.v1.GetOpeningResponse
	(*HasActiveOpeningRequest)(nil),  // 4: tap.points.v1.HasActiveOpeningRequest
	(*HasActiveOpeningResponse)(nil), // 5: tap.points.v1.HasActiveOpeningResponse
	(*CreateOpeningRequest)(nil),     // 6: tap.points.v1.CreateOpeningRequest
	(*CreateOpeningResponse)(nil),    // 7: tap.points.v1.CreateOpeningResponse
	(*CancelOpeningRequest)(nil),     // 8: tap.points.v1.CancelOpeningRequest
	(*CancelOpeningResponse)(nil),    // 9: tap.points.v1.CancelOpeningResponse
	(*OpeningID)(nil),                // 10: tap.points.v1.OpeningID
	(*Opening)(nil),                  // 11: tap.points.v1.Opening
	(*TreasuryID)(nil),               // 12: tap.points.v1.TreasuryID
	(*TokenCode)(nil),                // 13: tap.points.v1.TokenCode
	(*timestamppb.Timestamp)(nil),    // 14: google.protobuf.Timestamp
	(*v1.Page)(nil),                  // 15: tap.types.v1.Page
	(*v1.Decimal)(nil),               // 16: tap.types.v1.Decimal
}
var file_tap_points_v1_openings_proto_depIdxs = []int32{
	12, // 0: tap.points.v1.ListOpeningsRequest.treasury_id:type_name -> tap.points.v1.TreasuryID
	13, // 1: tap.points.v1.ListOpeningsRequest.src_token_code:type_name -> tap.points.v1.TokenCode
	13, // 2: tap.points.v1.ListOpeningsRequest.dst_token_code:type_name -> tap.points.v1.TokenCode
	14, // 3: tap.points.v1.ListOpeningsRequest.canceled_before:type_name -> google.protobuf.Timestamp
	14, // 4: tap.points.v1.ListOpeningsRequest.expired_before:type_name -> google.protobuf.Timestamp
	15, // 5: tap.points.v1.ListOpeningsRequest.page:type_name -> tap.types.v1.Page
	11, // 6: tap.points.v1.ListOpeningsResponse.items:type_name -> tap.points.v1.Opening
	10, // 7: tap.points.v1.GetOpeningRequest.id:type_name -> tap.points.v1.OpeningID
	11, // 8: tap.points.v1.GetOpeningResponse.opening:type_name -> tap.points.v1.Opening
	13, // 9: tap.points.v1.HasActiveOpeningRequest.src_token_code:type_name -> tap.points.v1.TokenCode
	13, // 10: tap.points.v1.HasActiveOpeningRequest.dst_token_code:type_name -> tap.points.v1.TokenCode
	14, // 11: tap.points.v1.HasActiveOpeningRequest.open_time:type_name -> google.protobuf.Timestamp
	14, // 12: tap.points.v1.HasActiveOpeningRequest.close_time:type_name -> google.protobuf.Timestamp
	16, // 13: tap.points.v1.CreateOpeningRequest.exchange_rate:type_name -> tap.types.v1.Decimal
	13, // 14: tap.points.v1.CreateOpeningRequest.src_token_code:type_name -> tap.points.v1.TokenCode
	13, // 15: tap.points.v1.CreateOpeningRequest.dst_token_code:type_name -> tap.points.v1.TokenCode
	14, // 16: tap.points.v1.CreateOpeningRequest.open_time:type_name -> google.protobuf.Timestamp
	14, // 17: tap.points.v1.CreateOpeningRequest.close_time:type_name -> google.protobuf.Timestamp
	11, // 18: tap.points.v1.CreateOpeningResponse.opening:type_name -> tap.points.v1.Opening
	10, // 19: tap.points.v1.CancelOpeningRequest.id:type_name -> tap.points.v1.OpeningID
	11, // 20: tap.points.v1.CancelOpeningResponse.opening:type_name -> tap.points.v1.Opening
	10, // 21: tap.points.v1.Opening.id:type_name -> tap.points.v1.OpeningID
	16, // 22: tap.points.v1.Opening.exchange_rate:type_name -> tap.types.v1.Decimal
	14, // 23: tap.points.v1.Opening.open_time:type_name -> google.protobuf.Timestamp
	14, // 24: tap.points.v1.Opening.close_time:type_name -> google.protobuf.Timestamp
	14, // 25: tap.points.v1.Opening.cancel_time:type_name -> google.protobuf.Timestamp
	13, // 26: tap.points.v1.Opening.src_token_code:type_name -> tap.points.v1.TokenCode
	13, // 27: tap.points.v1.Opening.dst_token_code:type_name -> tap.points.v1.TokenCode
	14, // 28: tap.points.v1.Opening.create_time:type_name -> google.protobuf.Timestamp
	0,  // 29: tap.points.v1.OpeningsService.ListOpenings:input_type -> tap.points.v1.ListOpeningsRequest
	2,  // 30: tap.points.v1.OpeningsService.GetOpening:input_type -> tap.points.v1.GetOpeningRequest
	4,  // 31: tap.points.v1.OpeningsService.HasActiveOpening:input_type -> tap.points.v1.HasActiveOpeningRequest
	6,  // 32: tap.points.v1.OpeningsService.CreateOpening:input_type -> tap.points.v1.CreateOpeningRequest
	8,  // 33: tap.points.v1.OpeningsService.CancelOpening:input_type -> tap.points.v1.CancelOpeningRequest
	1,  // 34: tap.points.v1.OpeningsService.ListOpenings:output_type -> tap.points.v1.ListOpeningsResponse
	3,  // 35: tap.points.v1.OpeningsService.GetOpening:output_type -> tap.points.v1.GetOpeningResponse
	5,  // 36: tap.points.v1.OpeningsService.HasActiveOpening:output_type -> tap.points.v1.HasActiveOpeningResponse
	7,  // 37: tap.points.v1.OpeningsService.CreateOpening:output_type -> tap.points.v1.CreateOpeningResponse
	9,  // 38: tap.points.v1.OpeningsService.CancelOpening:output_type -> tap.points.v1.CancelOpeningResponse
	34, // [34:39] is the sub-list for method output_type
	29, // [29:34] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_tap_points_v1_openings_proto_init() }
func file_tap_points_v1_openings_proto_init() {
	if File_tap_points_v1_openings_proto != nil {
		return
	}
	file_tap_points_v1_tokens_proto_init()
	file_tap_points_v1_treasuries_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tap_points_v1_openings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpeningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOpeningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpeningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpeningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasActiveOpeningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasActiveOpeningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpeningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpeningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOpeningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOpeningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpeningID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tap_points_v1_openings_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Opening); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tap_points_v1_openings_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tap_points_v1_openings_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tap_points_v1_openings_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_tap_points_v1_openings_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_tap_points_v1_openings_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tap_points_v1_openings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tap_points_v1_openings_proto_goTypes,
		DependencyIndexes: file_tap_points_v1_openings_proto_depIdxs,
		MessageInfos:      file_tap_points_v1_openings_proto_msgTypes,
	}.Build()
	File_tap_points_v1_openings_proto = out.File
	file_tap_points_v1_openings_proto_rawDesc = nil
	file_tap_points_v1_openings_proto_goTypes = nil
	file_tap_points_v1_openings_proto_depIdxs = nil
}
